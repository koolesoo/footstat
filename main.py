import logging
import requests
from telegram import Update
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext
from config import BOT_TOKEN

API_URL = "http://localhost:5001"
login_states = {}

logging.basicConfig(level=logging.INFO)

def start(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:\n\n"
        "login –≤–∞—à_–ª–æ–≥–∏–Ω –ø–∞—Ä–æ–ª—å –≤–∞—à_–ø–∞—Ä–æ–ª—å"
    )
    login_states[chat_id] = "awaiting_login"

def handle_login(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    text = update.message.text.strip()

    if not text.lower().startswith("login "):
        return

    try:
        parts = text.split()
        username = parts[1]
        if "–ø–∞—Ä–æ–ª—å" in parts:
            password = parts[parts.index("–ø–∞—Ä–æ–ª—å") + 1]
        else:
            password = parts[2]

        resp = requests.post(f"{API_URL}/api/login", json={
            "username": username,
            "password": password
        })

        if resp.status_code != 200:
            update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å.")
            return

        user_id = resp.json()["user"]["id"]

        reg = requests.post(f"{API_URL}/api/telegram-bind", json={
            "user_id": user_id,
            "chat_id": chat_id
        })

        if reg.status_code == 200:
            update.message.reply_text(f"‚úÖ –ì–æ—Ç–æ–≤–æ! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –ø—Ä–∏–≤—è–∑–∞–Ω –∫ Telegram.")
        else:
            update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–≤—è–∑–∞—Ç—å Telegram. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    login_states.pop(chat_id, None)

def result(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id

    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ chat_id
        user_resp = requests.get(f"{API_URL}/api/user-by-chat/{chat_id}")
        if user_resp.status_code != 200:
            update.message.reply_text("–í—ã –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ —Å–∞–π—Ç—É. –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å.")
            return

        user_id = user_resp.json()["id"]

        # –ü–æ–ª—É—á–∞–µ–º –ª—é–±–∏–º—É—é –∫–æ–º–∞–Ω–¥—É —Å –º–∞—Ç—á–∞–º–∏
        team_resp = requests.get(f"{API_URL}/api/fav-team/full/{user_id}")
        if team_resp.status_code != 200:
            update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–µ.")
            return

        data = team_resp.json()
        team = data.get("team")
        last = data.get("last_match")
        next_ = data.get("next_match")

        if not team:
            update.message.reply_text("–£ –≤–∞—Å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –ª—é–±–∏–º–∞—è –∫–æ–º–∞–Ω–¥–∞.")
            return

        messages = []

        if last:
            messages.append(
                f"üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π –º–∞—Ç—á {team['name']}:\n"
                f"{last['homeTeam']['name']} {last['score']['fullTime']['home']} : "
                f"{last['score']['fullTime']['away']} {last['awayTeam']['name']}\n"
                f"üïí {last['utcDate']}"
            )
        if next_:
            messages.append(
                f"üîú –°–ª–µ–¥—É—é—â–∏–π –º–∞—Ç—á {team['name']}:\n"
                f"{next_['homeTeam']['name']} vs {next_['awayTeam']['name']}\n"
                f"üïí {next_['utcDate']}"
            )

        if not messages:
            update.message.reply_text("–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞—Ç—á–∞—Ö.")
        else:
            update.message.reply_text("\n\n".join(messages))

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ /result: {e}")
        update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")

def main():
    updater = Updater(BOT_TOKEN, use_context=True)
    dp = updater.dispatcher
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("result", result))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_login))
    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()